image: "node:lts-alpine"

stages:
  - lint
  - deploy

# global cache settings for all jobs
# Ensure compatibility with the install job
# goal: the install job loads the cache and
# all other jobs can only use it
cache:
    # most npm libraries will only have 1 entry for the base project deps
    - key: &global_cache_node_mods
          files:
              - package-lock.json
      paths:
          - node_modules/
      policy: pull  # prevent subsequent jobs from modifying cache

before_script:
  # https://stackoverflow.com/a/75624610
  - cp ${PRODUCTION_ENV_FILE} .env.production
    # define cache dir & use it npm!
  - npm ci --cache node_modules/ --prefer-offline
#   # monorepo users: run secondary install actions
#   - npx lerna bootstrap -- --cache .npm/ --prefer-offline
  

lint:
  stage: lint
  # global cache settings are inherited to grab `node_modules`
  script:  
    - node --version
    - npm run lint

netlify:
  stage: deploy
  when: on_success # only if previous stages' jobs all succeeded
  # override inherited cache settings since node_modules is not needed
  script:
     - npm install netlify-cli -g
     - sed -i "s/capstone-design\/02\/vue-router\///g" "./src/router.js"
     - CI_PAGES_URL=
     - npm run build
     - cp -a dist/. public/
    #  - netlify --version
     - netlify deploy --site $NETLIFY_SITE_ID --auth $NETLIFY_AUTH_TOKEN --prod --dir public/
  artifacts:
    paths:
      - public
  rules:
    - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH

pages:
  stage: deploy
  when: on_success # only if previous stages' jobs all succeeded
  # override inherited cache settings since node_modules is not needed
  script:
     - npm run build
     - cp -a dist/. public/
  artifacts:
    paths:
      - public
  rules:
    - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH